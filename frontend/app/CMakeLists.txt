PROJECT(app LANGUAGES CXX)

#Qt工具开关，自动使用uic、moc、rcc；为了通过QResource::registerResource()动态加载资源，此处关闭rcc自动执行
SET(CMAKE_AUTOUIC ON)
SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTORCC OFF)

#查找Qt开发组件，头文件、开发库路径
FIND_PACKAGE(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Gui Widgets )
FIND_PACKAGE(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Gui Widgets )

#源代码文件
SET(SOURCE_LIST 
	widgets/appwidget.h
	widgets/appwidget.cpp
	widgets/appwidget.ui
    
	main.cpp stdafx.h stdafx.cpp
	mui/app.qrc mui/app.qss mui/app.rc mui/app.json
)

#文件分组
SOURCE_GROUP(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${SOURCE_LIST})

ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCE_LIST})

IF (WIN32)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES WIN32_EXECUTABLE true)
	TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PRIVATE WIN32_LEAN_AND_MEAN WIN32 _WIN32)
ENDIF()
TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PRIVATE XUTILITY_LIB_STATIC )

#debug输出文件后缀
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX "d")

#预编译文件
TARGET_PRECOMPILE_HEADERS(${PROJECT_NAME} PRIVATE
    stdafx.h
)

#依赖库
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PRIVATE
	Qt${QT_VERSION_MAJOR}::Gui
	Qt${QT_VERSION_MAJOR}::Widgets
	xutility
)

#编译完成后，复制文件qt.conf
ADD_CUSTOM_COMMAND(
	TARGET ${PROJECT_NAME}
	POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_SOURCE_DIR}/qt.conf $<TARGET_FILE_DIR:${PROJECT_NAME}>/qt.conf
)

#编译完成后，编译输出资源文件app.rcc，以及程序配置文件app.json, 翻译文件app-zh_CN.qm
X_ADD_RESOURCE_CONFIG_TRANSLATION(TARGET ${PROJECT_NAME})

#增加deployqt任务，编译deployqt时部署此程序的qt运行依赖
X_ADDTASK_DEPLOY_QT(TARGET ${PROJECT_NAME})